# -*- coding: utf-8 -*-
"""2_Decision_Trees.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4o73qPBW0HEdZYs_8nL6Y-VZTcotRUS

####Importing necessary libraries
"""

# Commented out IPython magic to ensure Python compatibility.
# Load libraries
import pandas as pd
from sklearn.tree import DecisionTreeClassifier # Import Decision Tree Classifier
from sklearn.model_selection import train_test_split # Import train_test_split function
from sklearn import metrics #Import scikit-learn metrics module for accuracy calculation
import operator # for sorting dictionaries

from sklearn.tree import export_graphviz
from sklearn.metrics import accuracy_score, confusion_matrix

from graphviz import Source
from IPython.display import Image
from sklearn.externals.six import StringIO  
import pydotplus

# %matplotlib inline

"""####Loading Data"""

from google.colab import files
df = files.upload()

import io
data = io.BytesIO(df['credit_count.csv'])

df = pd.read_csv('credit_count.csv',sep=',')
df.head()

"""####Feature Selection/Splitting Data"""

#split dataset in features and target variable
feature_cols = ['AGE', 'ACADMOS', 'INCOME','INCPER','EXP_INC','MINORDRG']
X = df[feature_cols] # Features
y = df['CARDHLDR'] # Target variable

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1) # 70% training and 30% test

"""####Building Decision Tree Model"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier()

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

"""Evaluating Model"""

print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

"""Visualizing Decision Trees"""

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True,feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('diabetes.png')
Image(graph.create_png())

"""####Optimizing Decision Tree Performance

"""

# Create Decision Tree classifer object
clf = DecisionTreeClassifier(criterion="entropy", max_depth=3)

# Train Decision Tree Classifer
clf = clf.fit(X_train,y_train)

#Predict the response for test dataset
y_pred = clf.predict(X_test)

# Model Accuracy, how often is the classifier correct?
print("Accuracy:",metrics.accuracy_score(y_test, y_pred))

#Feature Importance
columns = df.columns.values
importance = clf.feature_importances_
c_imp = {}

# Populate dictionary
for col,imp in zip(columns,importance):
    c_imp[col] = imp

# Print in descending order
for col, imp in reversed(sorted(c_imp.items(), key=operator.itemgetter(1))):
    print (col,':',imp)

pd.DataFrame(
    confusion_matrix(y_test,y_pred),
    columns=['Predicted Not Default','Predicted Default'],
    index=['True Not Default','True Default']
)

dot_data = StringIO()
export_graphviz(clf, out_file=dot_data,  
                filled=True, rounded=True,
                special_characters=True, feature_names = feature_cols,class_names=['0','1'])
graph = pydotplus.graph_from_dot_data(dot_data.getvalue())  
graph.write_png('tree.png')
Image(graph.create_png())